function setUpApp(bootstrapApp){function getJWT(){if(sessionStorage.token)return sessionStorage.token;var queriesString=location.search;if("undefined"==typeof queriesString)return null;var queries=queriesString.substring(1).split("&"),jwt=null;for(var key in queries){var queryString=queries[key],query=queryString.split("=");"jwt"==query[0]&&(jwt=query[1])}if(jwt){var uri=location.toString();if(uri.indexOf("?")>0){var clean_uri=uri.substring(0,uri.indexOf("?"));history.replaceState({},document.title,clean_uri)}}return jwt}window.stompClient=Stomp.over(new SockJS(globalConfig.webService+"/connect"));var jwt=getJWT();globalConfig.stompDebug||(window.stompClient.debug=null),jwt?(sessionStorage.token||(sessionStorage.token=jwt),angular.element(document).ready(function(){window.stompClient.connect({jwt:sessionStorage.token},function(){bootstrapApp()})})):window.open(globalConfig.authService+"/token?referer="+location.href,"_self")}var globalConfig={authService:"https://labs.library.tamu.edu/authservice-dev",webService:"http://imacdev.tamu.edu:9000",display:{dashboard:!0,myrecord:!0,classguides:!1,coursereserves:!1,getitforme:!1,mylibrarian:!1,whatsnew:!1,time:!0,weather:!0,notices:!1,settings:!1},logging:{log:!0,info:!0,error:!0,debug:!0},stompDebug:!1,mockUser:null},myLibrary=angular.module("myLibrary",["ngRoute","myLibrary.version"]).constant("globalConfig",globalConfig);setUpApp(function(){angular.bootstrap(document,["myLibrary"])});var logger={log:function(message){globalConfig.logging.log&&console.log(message)},info:function(message){globalConfig.logging.info&&console.info(message)},error:function(message){globalConfig.logging.error&&console.error(message)},debug:function(message){globalConfig.logging.debug&&console.debug(message)}};myLibrary.run(function(){angular.element("body").fadeIn(300)}),myLibrary.config(["$routeProvider","$locationProvider",function($routeProvider,$locationProvider){$locationProvider.html5Mode(!0),$routeProvider.when("/myrecord",{templateUrl:"view/record.html"}).when("/classguides",{templateUrl:"view/class.html"}).when("/coursereserves",{templateUrl:"view/course.html"}).when("/getitforme",{templateUrl:"view/getit.html"}).when("/mylibrarian",{templateUrl:"view/mylibrarian.html"}).when("/whatsnew",{templateUrl:"view/new.html"}).otherwise({redirectTo:"/dashboard",templateUrl:"view/dashboard.html"})}]),myLibrary.directive("username",function(){return{template:'<span>{{user.firstName || "Obtaining User..."}} {{user.lastName}}</span>',restrict:"E",scope:!0,controller:"UserController"}}),myLibrary.directive("useremail",function(){return{template:"<span>{{user.email}}</span>",restrict:"E",scope:!0,controller:"UserController"}}),myLibrary.directive("useruin",function(){return{template:"<span>{{user.uin}}</span>",restrict:"E",scope:!0,controller:"UserController"}}),myLibrary.directive("modal",function(){return{template:'<div class="modal fade"><div class="modal-dialog" style="z-index:9999;"><div class="modal-content"><div class="modal-header"><button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button><h4 class="modal-title">{{ title }}</h4></div><div class="modal-body" ng-transclude></div></div></div></div>',restrict:"E",transclude:!0,replace:!0,scope:!0,link:function(scope,element,attrs){scope.title=attrs.title,scope.$watch(attrs.visible,function(value){angular.element(element).modal(value===!0?"show":"hide")}),angular.element(element).on("shown.bs.modal",function(){scope.$apply(function(){scope.$parent[attrs.visible]=!0})}),angular.element(element).on("hidden.bs.modal",function(){scope.$apply(function(){scope.$parent[attrs.visible]=!1})})}}}),myLibrary.directive("totalfines",function(){return{template:"<span>{{fines.total | number : 2}}</span>",restrict:"E",scope:!0,controller:"FinesController"}}),myLibrary.directive("totalloans",function(){return{template:"<span>{{loans.loanCount || 0}}</span>",restrict:"E",scope:!0,controller:"LoansController"}}),myLibrary.directive("totalrequests",function(){return{template:"<span>{{requests.holdCount || 0}}</span>",restrict:"E",scope:!0,controller:"RequestsController"}}),myLibrary.service("wsservice",function($q){var wsservice=this;wsservice.pendingReqCounter=0,wsservice.pendingReq={},wsservice.subscriptions={},wsservice.client=window.stompClient,delete window.stompClient,wsservice.subscribe=function(channel,persist){var defer,id="sub-"+wsservice.client.counter;persist||(persist=!1);var subObj;return(subObj=wsservice.subExist(channel))?defer=subObj.defer:(defer=$q.defer(),subObj={channel:channel,defer:defer},wsservice.client.subscribe(channel,function(data){var requestId=JSON.parse(data.body).content.RequestId?JSON.parse(data.body).content.RequestId.id:null,response=JSON.parse(data.body).response;wsservice.pendingReq[requestId]&&(logger.info(""),logger.debug(channel),logger.info("Resolving Request "+requestId+": "+wsservice.pendingReq[requestId].request),logger.log(JSON.parse(data.body)),"refresh"!=response?("failure"!=response?wsservice.pendingReq[requestId].defer.resolve(data):wsservice.pendingReq[requestId].defer.reject(data),delete wsservice.pendingReq[requestId]):wsservice.pendingReq[requestId].defer.notify(data)),defer.notify(data)}),wsservice.subscriptions[id]=subObj),defer.promise},wsservice.send=function(request,headers,payload,channel){wsservice.subExist(channel)||wsservice.subscribe(channel);var reqDefer=$q.defer();return headers.id=wsservice.pendingReqCounter++,wsservice.client.send(request,headers,payload),wsservice.pendingReq[headers.id]={defer:reqDefer,resend:function(){headers.jwt=sessionStorage.token,wsservice.client.send(request,headers,payload)}},wsservice.pendingReq[headers.id].defer.promise},wsservice.subExist=function(channel){for(var key in wsservice.subscriptions){var subObj=wsservice.subscriptions[key];if(subObj.channel==channel)return subObj}return!1},wsservice.unsubscribe=function(sub){wsservice.client.unsubscribe(sub),delete wsservice.subscriptions[sub]},wsservice.unsubscribeAll=function(){for(var key in wsservice.subscriptions){var sub=wsservice.subscriptions[key];sub.persist||wsservice.unsubscribe(key)}}}),myLibrary.service("MyLibraryRestApi",function($http){var webservice=globalConfig.webService,authservice=globalConfig.authService;this.get=function(api){var apirequest=webservice+"/rest/"+api.controller+"/"+api.method;console.log(apirequest);var jwtHeader={headers:{jwt:sessionStorage.token}};return $http.get(apirequest,jwtHeader).then(function(data){return data.data},function(e){return console.log(e),"expired"==e.data.message?(config={withCredentials:!0},$http.get(authservice+"/refresh",config).then(function(response){return sessionStorage.token=response.data.tokenAsString,jwtHeader={headers:{jwt:response.data.tokenAsString}},$http.get(apirequest,jwtHeader).then(function(data){return data.data})})):void window.location.replace(authservice+"/token?referer="+window.location)})}}),myLibrary.service("MyLibraryWsApi",function($q,$http,wsservice,AuthServiceApi){var MyLibraryWsApi=this;MyLibraryWsApi.listen=function(apiReq){var channel=("/ws/"+apiReq.controller+"/"+apiReq.method,"/"+apiReq.endpoint+"/"+apiReq.controller);return apiReq.method&&(channel+="/"+apiReq.method),wsservice.subscribe(channel)},MyLibraryWsApi.fetch=function(apiReq){var request="/ws/"+apiReq.controller+"/"+apiReq.method,channel=apiReq.endpoint+"/"+apiReq.controller+"/"+apiReq.method,fetchPromise=wsservice.send(request,{jwt:sessionStorage.token,data:apiReq.data},{},channel);return fetchPromise.then(null,null,function(data){"EXPIRED_JWT"==JSON.parse(data.body).content.String&&(sessionStorage.assumedUser?AuthServiceApi.getAssumedUser(JSON.parse(sessionStorage.assumedUser)).then(function(){wsservice.pendingReq[JSON.parse(data.body).content.RequestId.id].resend()}):AuthServiceApi.getRefreshToken().then(function(){wsservice.pendingReq[JSON.parse(data.body).content.RequestId.id].resend()}))}),fetchPromise}}),myLibrary.service("AuthServiceApi",function($http,$timeout){var AuthServiceApi=this;AuthServiceApi.pendingRefresh=null,AuthServiceApi.pendingAssumptions={},AuthServiceApi.getAssumedUser=function(assume,cb){return AuthServiceApi.pendingAssumptions[assume.netid]||(AuthServiceApi.pendingAssumptions[assume.netid]=$http.get(globalConfig.authService+"/admin?netid="+assume.netid,{withCredentials:!0}).then(function(response){response.data.assumed&&(sessionStorage.token=response.data.assumed.tokenAsString),$timeout(function(){AuthServiceApi.pendingAssumptions[assume.netid]=null}),cb&&cb()})),AuthServiceApi.pendingAssumptions[assume.netid]},AuthServiceApi.getRefreshToken=function(cb){return AuthServiceApi.pendingRefresh||(AuthServiceApi.pendingRefresh=$http.get(globalConfig.authService+"/refresh",{withCredentials:!0}).then(function(response){sessionStorage.token=response.data.tokenAsString,$timeout(function(){AuthServiceApi.pendingRefresh=null}),cb&&cb()},function(){delete sessionStorage.token,window.open(globalConfig.authService+"/token?referer="+location.href,"_self")})),AuthServiceApi.pendingRefresh}}),myLibrary.service("AbstractModel",function(){var AbstractModel=function(data){angular.extend(this,data)};return AbstractModel.unwrap=function(self,futureData,modelString){return futureData.$$state?void futureData.then(function(data){angular.extend(self,JSON.parse(data.body).content[modelString])},function(data){consoel.error(data)},function(data){angular.extend(self,JSON.parse(data.body).content[modelString])}):void angular.extend(self,futureData)},AbstractModel}),myLibrary.service("User",function(MyLibraryWsApi,AbstractModel){var self,User=function(futureData){self=this,angular.extend(self,AbstractModel),self.unwrap(self,futureData,"Credentials")};return User.data=null,User.set=function(data){self.unwrap(self,data)},User.get=function(action){if(User.data&&!action)return User.data;var newUserPromise=MyLibraryWsApi.fetch({endpoint:"/private/queue",controller:"user",method:"credentials"});return action?newUserPromise.then(function(data){console.log("Inside Promise"),User.set(JSON.parse(data.body).content.Credentials)}):User.data=new User(newUserPromise),User.data},User}),myLibrary.service("Time",function(MyLibraryWsApi,AbstractModel){var self,Time=function(futureData){self=this,angular.extend(self,AbstractModel),self.unwrap(self,futureData,"HashMap")};return Time.data=null,Time.set=function(data){self.unwrap(self,data,"HashMap")},Time.get=function(){return Time.data=new Time(MyLibraryWsApi.fetch({endpoint:"/private/queue",controller:"time",method:"now"})),Time.set(MyLibraryWsApi.listen({endpoint:"channel",controller:"time",method:""})),Time.data},Time}),myLibrary.service("Fines",function(MyLibraryWsApi,AbstractModel){var self,Fines=function(futureData){self=this,angular.extend(self,AbstractModel),self.unwrap(self,futureData,"FlatFines")};return Fines.data=null,Fines.set=function(data){self.unwrap(self,data)},Fines.get=function(action){if(Fines.data&&!action)return Fines.data;var newFinesPromise=MyLibraryWsApi.fetch({endpoint:"/private/queue",controller:"myrecord",method:"fines"});return action?newFinesPromise.then(function(data){Fines.set(JSON.parse(data.body).content.FlatFines)}):Fines.data=new Fines(newFinesPromise),Fines.data},Fines}),myLibrary.service("Requests",function(MyLibraryWsApi,AbstractModel){var self,Requests=function(futureData){self=this,angular.extend(self,AbstractModel),self.unwrap(self,futureData,"FlatHolds")};return Requests.data=null,Requests.set=function(data){self.unwrap(self,data)},Requests.get=function(action){if(Requests.data&&!action)return Requests.data;var newRequestsPromise=MyLibraryWsApi.fetch({endpoint:"/private/queue",controller:"myrecord",method:"requests"});return action?newRequestsPromise.then(function(data){Requests.set(JSON.parse(data.body).content.FlatHolds)}):Requests.data=new Requests(newRequestsPromise),Requests.data},Requests.cancelById=function(cancelUrl){MyLibraryWsApi.fetch({endpoint:"/private/queue",controller:"myrecord",method:"cancel",data:cancelUrl}).then(function(){var list=self.list;delete self.list;var updateObj={list:[]};for(var key in list)list[key].href!=cancelUrl&&updateObj.list.push(list[key]);angular.extend(self,updateObj)})},Requests}),myLibrary.service("Loans",function($q,MyLibraryWsApi,AbstractModel){var self,Loans=function(futureData){self=this,angular.extend(self,AbstractModel),self.unwrap(self,futureData,"FlatLoans")};return Loans.data=null,Loans.set=function(data){self.unwrap(self,data)},Loans.get=function(action){if(Loans.data&&!action)return Loans.data;var newLoansPromise=MyLibraryWsApi.fetch({endpoint:"/private/queue",controller:"myrecord",method:"items"});return action?newLoansPromise.then(function(data){Loans.set(JSON.parse(data.body).content.FlatLoans)}):Loans.data=new Loans(newLoansPromise),Loans.data},Loans.renewLoanById=function(renewUrl){return $q(function(resolve,reject){MyLibraryWsApi.fetch({endpoint:"/private/queue",controller:"myrecord",method:"renew",persist:!1,data:renewUrl}).then(function(data){var renewedItemId=JSON.parse(data.body).content.FlatRenewal.itemId;for(var key in self.list)self.list[key].itemId==renewedItemId&&angular.extend(self.list[key],data);resolve("renewed")},function(){reject("failed")})})},Loans}),myLibrary.service("Broadcast",function(MyLibraryWsApi,AbstractModel){var self,Broadcast=function(futureData){self=this,angular.extend(self,AbstractModel),self.unwrap(self,futureData,"HashMap")};return Broadcast.data={message:"Hello, World!"},Broadcast.set=function(data){self.unwrap(self,data)},Broadcast.get=function(){return MyLibraryWsApi.listen({endpoint:"channel",controller:"admin",method:"broadcast"}).then(null,null,function(data){Broadcast.set(JSON.parse(data.body).content.HashMap)}),new Broadcast(Broadcast.data)},Broadcast.send=function(message){MyLibraryWsApi.fetch({endpoint:"channel",controller:"admin",method:"broadcast",data:message})},Broadcast}),myLibrary.controller("DashboardController",function($scope){$scope.title="MyLibrary"}),myLibrary.controller("UserController",function($scope,User){$scope.user=User.get()}),myLibrary.controller("AdminController",function($scope,$http,User,Fines,Loans,Requests,AuthServiceApi){$scope.user=User.get(),$scope.showModal=!1,sessionStorage.assumedUser?($scope.assume=JSON.parse(sessionStorage.assumedUser),$scope.assumeBtn="Unassume"):$scope.assumeBtn="Assume",$scope.$watch("user.role",function(){sessionStorage.role=$scope.user.role,$scope.admin="ROLE_ADMIN"==$scope.user.role?!0:!1}),$scope.assumeUser=function(assume){sessionStorage.assumedUser?(console.log("Unassuming user"),sessionStorage.token=sessionStorage.adminToken,delete sessionStorage.assumedUser,User.get("unassume"),Fines.get("unassume"),Loans.get("unassume"),Requests.get("unassume"),$scope.assumeBtn="Assume"):(console.log("Assuming user"),console.log(assume),assume.netid&&(sessionStorage.adminToken=sessionStorage.token,sessionStorage.assumedUser=JSON.stringify(assume),AuthServiceApi.getAssumedUser(assume).then(function(data){data?(User.get("assume"),Fines.get("assume"),Loans.get("assume"),Requests.get("assume"),$scope.assumeBtn="Unassume",$scope.assumeStatus="",$scope.showModal=!1):($scope.assumeStatus="invalid netid",delete sessionStorage.assumedUser,$scope.assumeBtn="Assume")})))},$scope.toggleModal=function(){$scope.showModal=!$scope.showModal}}),myLibrary.controller("TimeController",function($scope,Time){$scope.time=Time.get()}),myLibrary.controller("WeatherController",function(){angular.element.simpleWeather({location:"College Station, TX",woeid:"",unit:"f",success:function(weather){var html;html='<h2><i class="weather-icon-'+weather.code+'"></i> '+weather.temp+"&deg;"+weather.units.temp+"</h2>",html+='<ul><li class="currently">'+weather.currently+"</li>",html+="<li>"+weather.city+", "+weather.region+"</li></ul>",html+="<li>"+weather.wind.direction+" "+weather.wind.speed+" "+weather.units.speed+"</li>",angular.element("#weather").html(html)},error:function(error){angular.element("#weather").html("<p>"+error+"</p>")}})}),myLibrary.controller("MenuController",function($location,$scope,$rootScope){$scope.user={};var view=$location.url();view=view.substring(1,view.length),view.indexOf("?")>0&&(view=view.substring(0,view.indexOf("?"))),view||(view="dashboard"),$scope.toggleObject={item:view},$scope.$on("rootScope:credentials",function(event,credentials){$scope.user=credentials}),$rootScope.display=globalConfig.display}),myLibrary.controller("BroadcastController",function($scope,Broadcast){$scope.broadcast=Broadcast.get(),$scope.send=function(message){Broadcast.send(message),document.getElementById("broadcast").value=""}}),myLibrary.controller("FinesController",function($scope,Fines){$scope.fines=Fines.get()}),myLibrary.controller("RequestsController",function($scope,Requests){$scope.requests=Requests.get(),$scope.hasRequests=function(which){var key;if("available"==which){if($scope.requests.list&&$scope.requests.list.length>0)for(key in $scope.requests.list)if("H"==$scope.requests.list[key].holdType)return!0}else if($scope.requests.list&&$scope.requests.list.length>0)for(key in $scope.requests.list)if("C"==$scope.requests.list[key].holdType||"U"==$scope.requests.list[key].holdType)return!0;return!1},$scope.cancel=function(itemId){for(var key in $scope.requests.list){var request=$scope.requests.list[key];if(request.itemId==itemId){Requests.cancelById(request.href);break}}},$scope.cancelAll=function(which){var key,request;if("available"==which)for(key in $scope.requests.list)request=$scope.requests.list[key],"H"==request.holdType&&$scope.cancel(request.itemId,request.href);else for(key in $scope.requests.list)request=$scope.requests.list[key],"R"!=request.holdType&&$scope.cancel(request.itemId,request.href)}}),myLibrary.controller("LoansController",function($scope,Loans){$scope.loans=Loans.get(),$scope.checkAllCanRenew=function(){var canRenewAll=!1;for(var key in $scope.loans.list)if($scope.isRenewable($scope.loans.list[key])){canRenewAll=!0;break}return canRenewAll},$scope.renew=function(_loan){itemId=_loan.itemId,_loan.isLoading=!0;var loan;for(var key in $scope.loans.list)if(loan=$scope.loans.list[key],loan.itemId==itemId)break;Loans.renewLoanById(loan.href).then(function(){loan.renewStatus="Renewed",loan.isLoading=!1},function(){loan.renewStatus="Failed",loan.isLoading=!1})},$scope.isRenewable=function(loan){return"Y"==loan.canRenew&&"Renewed"!=loan.renewStatus&&"Failed"!=loan.renewStatus?!0:("N"==loan.canRenew&&"Renewed"!=loan.renewStatus&&"Failed"!=loan.renewStatus&&(loan.renewStatus="Not Renewable"),!1)},$scope.renewAll=function(){for(var key in $scope.loans.list)$scope.isRenewable($scope.loans.list[key])&&$scope.renew($scope.loans.list[key])}});